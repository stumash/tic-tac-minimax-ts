{"version":3,"sources":["square.tsx","board.tsx","grid.ts","aibutton.tsx","game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","value","onClick","className","Board","grid","renderSquare","i","j","valAtPos","X","O","gridIndices","boardLines","copyGrid","copy","undefined","length","add","x","y","TTTGrid","dim","this","winner","xs_and_os","map","pos","every","x_or_o","f","retval","forEach","row","cell","playerTurn","flat","v","cellValueAsInt","reduce","flip","AiButton","isTurnX","doClick","isBoardFull","miniMax","detectWinner","minOrMax","myMax","myMin","bestScore","bestMove","possibleMoves","withMove","possibleScore","move","handleClick","Game","props","state","history","stepNumber","xIsNext","status","currentGrid","moves","gridNumber","desc","key","uniqueId","jumpTo","slice","pieceToPlay","nextGrid","historyUntilNow","setState","React","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a4d20de.chunk.js","sourcesContent":["\nimport React, { MouseEventHandler } from 'react';\nimport { CellValue } from './grid';\n\nexport interface SquareProps {\n  value: CellValue,\n  onClick: MouseEventHandler \n}\n\nfunction Square({ value, onClick }: SquareProps) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nexport { Square };\n","import React from 'react';\n\nimport { Square } from './square';\nimport TTTGrid, { GridIndex } from './grid';\n\nexport interface BoardProps {\n  grid: TTTGrid,\n  onClick: (i: GridIndex, j: GridIndex) => void\n}\n\nexport function Board({ grid, onClick }: BoardProps) {\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0,0, grid, onClick)}\n        {renderSquare(0,1, grid, onClick)}\n        {renderSquare(0,2, grid, onClick)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(1,0, grid, onClick)}\n        {renderSquare(1,1, grid, onClick)}\n        {renderSquare(1,2, grid, onClick)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(2,0, grid, onClick)}\n        {renderSquare(2,1, grid, onClick)}\n        {renderSquare(2,2, grid, onClick)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderSquare(\n  i: GridIndex,\n  j: GridIndex,\n  grid: TTTGrid,\n  onClick: (i: GridIndex, j: GridIndex) => void\n) {\n  return (\n      <Square\n        value={ grid.valAtPos(i, j) }\n        onClick={ () => onClick(i,j) }\n      />\n  );\n}\n","/**\n * TicTacToe Grid object TTTGrid\n *  + companion types and functions (X, O, CellValue, Row, Grid)\n */\n\n// tic tac toe, rows of x's and o's\nexport type Xtype = \"X\";\nexport type Otype = \"O\";\nexport const X: Xtype = \"X\";\nexport const O: Otype = \"O\";\nexport type CellValue = Xtype | Otype | undefined;\nexport type Row = [CellValue, CellValue, CellValue];\nexport type Grid = [Row, Row, Row];\nexport type GridIndex = 0 | 1 | 2;\n\nconst zero: GridIndex = 0;\nconst one: GridIndex = 1;\nconst two: GridIndex = 2;\nconst gridIndices: Array<GridIndex> = [zero, one, two];\n\nconst boardLines = [\n  // horizontal lines\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n  ],\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n  ],\n  [\n    [2, 0],\n    [2, 1],\n    [2, 2],\n  ],\n  // vertical lines\n  [\n    [0, 0],\n    [1, 0],\n    [2, 0],\n  ],\n  [\n    [0, 1],\n    [1, 1],\n    [2, 1],\n  ],\n  [\n    [0, 2],\n    [1, 2],\n    [2, 2],\n  ],\n  // diagonal lines\n  [\n    [0, 0],\n    [1, 1],\n    [2, 2],\n  ],\n  [\n    [2, 0],\n    [1, 1],\n    [0, 2],\n  ],\n];\n\nconst defaultGrid = function (): Grid {\n  return [\n    [undefined, undefined, undefined],\n    [undefined, undefined, undefined],\n    [undefined, undefined, undefined],\n  ];\n};\n\nconst copyGrid = function (grid: Grid): Grid {\n  let copy = defaultGrid();\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      copy[i][j] = grid[i][j];\n    }\n  }\n  return copy;\n};\n\nconst cellValueAsInt = function (v: CellValue): GridIndex {\n  if (v === undefined) {\n    return 0;\n  } else if (v === X) {\n    return 1;\n  } else {\n    // v === O\n    return 2;\n  }\n};\n\nconst add = (x: number, y: number): number => x + y;\n\n/**\n * TicTacToe Grid\n */\nexport default class TTTGrid {\n  private readonly dim: number = 3;\n  private readonly grid: Grid;\n\n  constructor(grid: Grid | undefined = undefined) {\n    this.grid = grid || defaultGrid();\n  }\n\n  detectWinner(): CellValue {\n    let winner: CellValue = undefined;\n    for (let line of boardLines) {\n      let xs_and_os = line.map((pos) => this.grid[pos[0]][pos[1]]);\n\n      if (xs_and_os.every((x_or_o) => x_or_o === X)) {\n        winner = X;\n        break;\n      } else if (xs_and_os.every((x_or_o) => x_or_o === O)) {\n        winner = O;\n        break;\n      }\n    }\n    return winner;\n  }\n\n  forEachCell(f: (i: number, j: number, v: CellValue) => void) {\n    for (let i = 0; i < this.dim; i++) {\n      for (let j = 0; j < this.dim; j++) {\n        f(i, j, this.grid[i][j]);\n      }\n    }\n  }\n\n  valAtPos(i: GridIndex, j: GridIndex): CellValue {\n    return this.grid[i][j];\n  }\n\n  isBoardFull(): boolean {\n    let retval = true;\n    this.grid.forEach((row) =>\n      row.forEach((cell) => {\n        if (cell === undefined) {\n          retval = false;\n        }\n      })\n    );\n    return retval;\n  }\n\n  *possibleMoves(): Generator<[GridIndex, GridIndex]> {\n    for (let i of gridIndices) {\n      for (let j of gridIndices) {\n        if (this.grid[i][j] === undefined) {\n          yield [i, j];\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {CellValue} playerTurn the value to assign to cell (i,j)\n   * @param {number} i row index in range [0, 1, 2]\n   * @param {number} j row index in range [0, 1, 2]\n   * @return {TTTGrid} the current grid, but the cell at (i,j) has value playerTurn\n   */\n  withMove(playerTurn: CellValue, i: number, j: number): TTTGrid {\n    const retval = copyGrid(this.grid);\n    retval[i][j] = playerTurn;\n    return new TTTGrid(retval);\n  }\n\n  uniqueId(): number {\n    const cells: Array<CellValue> = this.grid.flat();\n    return (\n      cells\n        // a cell can be on of three values (X, O, undefined), so we need at least 2 bits per cell\n        .map((v, i) => {\n          return cellValueAsInt(v) << (i * 2);\n        })\n        .reduce(add, 0)\n    );\n  }\n\n  // all 8 equivalent board states by symmetry and rotation\n  private *equivalentGrids() {\n    const grid = copyGrid(this.grid);\n    yield grid;\n\n    yield [\n      [grid[0][0], grid[1][0], grid[2][0]], // a a b\n      [grid[0][1], grid[1][1], grid[2][1]], // * * b\n      [grid[0][2], grid[1][2], grid[2][2]], // * * *\n    ];\n    yield [\n      [grid[0][0], grid[1][0], grid[2][0]], // a a *\n      [grid[0][1], grid[1][1], grid[2][1]], // * * *\n      [grid[0][2], grid[1][2], grid[2][2]], // * b b\n    ];\n    yield [\n      [grid[0][0], grid[1][0], grid[2][0]], // a a *\n      [grid[0][1], grid[1][1], grid[2][1]], // b * *\n      [grid[0][2], grid[1][2], grid[2][2]], // b * *\n    ];\n\n    const flip = [\n      [grid[2][0], grid[2][1], grid[2][2]], // a a a\n      [grid[1][0], grid[1][1], grid[1][2]], // - - -\n      [grid[0][0], grid[0][1], grid[0][2]], // b b b\n    ];\n    yield flip;\n\n    yield [\n      [flip[0][0], flip[1][0], flip[2][0]], // a a b\n      [flip[0][1], flip[1][1], flip[2][1]], // * * b\n      [flip[0][2], flip[1][2], flip[2][2]], // * * *\n    ];\n    yield [\n      [flip[0][0], flip[1][0], flip[2][0]], // a a *\n      [flip[0][1], flip[1][1], flip[2][1]], // * * *\n      [flip[0][2], flip[1][2], flip[2][2]], // * b b\n    ];\n    yield [\n      [flip[0][0], flip[1][0], flip[2][0]], // a a *\n      [flip[0][1], flip[1][1], flip[2][1]], // b * *\n      [flip[0][2], flip[1][2], flip[2][2]], // b * *\n    ];\n  }\n}\n","/**\n * Naive implementation of MiniMax for TicTacToe. No caching, no optimization.\n */\n\nimport React from \"react\";\nimport TTTGrid, { X, O, GridIndex } from \"./grid\";\n\nexport interface AiButtonProps {\n  grid: TTTGrid;\n  isTurnX: boolean;\n  doClick: (i: GridIndex, j: GridIndex) => void;\n}\n\nexport function AiButton({ grid, isTurnX, doClick }: AiButtonProps) {\n  return (\n    <button onClick={() => handleClick(grid, isTurnX, doClick)}>\n      Do Best Next Move\n    </button>\n  );\n}\n\nfunction handleClick(\n  grid: TTTGrid,\n  isTurnX: boolean,\n  doClick: (i: GridIndex, j: GridIndex) => void\n) {\n  if (grid.isBoardFull()) {\n    return;\n  }\n\n  const [, move] = miniMax(grid, isTurnX);\n  if (move) {\n    const [i, j] = move;\n    doClick(i, j);\n  }\n}\n\n// MINIMAX\n// X is the maximizer, O is the minimizer\ntype XWins = 1;\nconst Xwins: XWins = 1;\ntype OWins = -1;\nconst Owins: OWins = -1;\ntype Draw = 0;\ntype Score = XWins | Draw | OWins;\ntype GridPos = [GridIndex, GridIndex];\n\nfunction miniMax(\n  grid: TTTGrid,\n  isTurnX: boolean\n): [Score, GridPos | undefined] {\n  const winner = grid.detectWinner();\n  if (winner === X) {\n    return [1, undefined];\n  } else if (winner === O) {\n    return [-1, undefined];\n  } else {\n    // either draw or not done\n    if (grid.isBoardFull()) {\n      return [0, undefined];\n    } else {\n      const minOrMax = isTurnX ? myMax : myMin;\n      const playerTurn = isTurnX ? X : O;\n\n      // assume you lose\n      let bestScore: Score = isTurnX ? Owins : Xwins;\n      let bestMove: GridPos | undefined = undefined;\n\n      for (let [i, j] of grid.possibleMoves()) {\n        const [possibleScore] = miniMax(\n          grid.withMove(playerTurn, i, j),\n          !isTurnX\n        );\n        bestScore = minOrMax(bestScore, possibleScore);\n        bestMove = bestScore === possibleScore ? [i, j] : bestMove;\n      }\n      return [bestScore, bestMove];\n    }\n  }\n}\n\n// some type safety bs\nfunction myMax(x: Score, y: Score): Score {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\nfunction myMin(x: Score, y: Score): Score {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport { Board } from \"./board\";\nimport { AiButton } from \"./aibutton\";\nimport TTTGrid, { X, O, GridIndex } from \"./grid\";\n\ninterface GameState {\n  history: Array<TTTGrid>;\n  stepNumber: number;\n  xIsNext: boolean;\n}\n\nexport default class Game extends React.PureComponent<any, GameState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      history: [new TTTGrid()],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  render() {\n    const history = this.state.history;\n    const currentGrid = history[this.state.stepNumber];\n    const winner = currentGrid.detectWinner();\n\n    const moves = history.map((grid, gridNumber) => {\n      const desc = gridNumber\n        ? \"Go to move #\" + gridNumber\n        : \"Go to game start\";\n      return (\n        <li key={grid.uniqueId()}>\n          <button onClick={() => this.jumpTo(gridNumber)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? X : O);\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            grid={currentGrid}\n            onClick={(i, j) => this.handleClick(i, j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <AiButton\n            grid={currentGrid}\n            isTurnX={this.state.xIsNext}\n            doClick={(i, j) => this.handleClick(i, j)}\n          />\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n\n  handleClick(i: GridIndex, j: GridIndex) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const currentGrid = history[history.length - 1];\n    if (currentGrid.valAtPos(i, j) || currentGrid.detectWinner()) {\n      return;\n    }\n\n    const pieceToPlay = this.state.xIsNext ? X : O;\n    const nextGrid = currentGrid.withMove(pieceToPlay, i, j);\n    const historyUntilNow = history.slice(0, this.state.stepNumber + 1);\n\n    this.setState({\n      history: [...historyUntilNow, nextGrid],\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(stepNumber: number) {\n    this.setState({\n      stepNumber: stepNumber,\n      xIsNext: stepNumber % 2 === 0,\n    });\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Game from \"./game\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Tic Tac Toe\n      </header>\n      <div className=\"Game-container\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}